/* CSS VARIABLES */
:root {
    --default-bg-color: #005;
    --default-fg-color: #fff;
    --default-gap: 10px;
    --default-border-radius: 5px;

    --button-width: 100px;
    --button-height: auto;
    --cubic-bezier-1: cubic-bezier(0,1.06,.4,1.08);

    --font-size-normal: 2rem;
    --font-size-reduced: 1.3rem;
    --font-size-button: 2rem;
    --font-size-logo: 1.5rem;
}

/* GLOBAL SETTINGS AND RESETS */
html {
    box-sizing: border-box;
    font-size: 100%;
    font-family: monospace;
    color: var(--default-fg-color);
    background-color: dodgerblue;
}

*, *::before, *::after {
    box-sizing: inherit;
}

body, h1, p, ul {
    margin: 0;
}

ul {
    padding: 0;
    list-style-type: none;
}

/* MAIN CONFIGURATION */
body {
    background-color: var(--default-bg-color);
    margin: 0;
    min-height: 100vh;
    display: grid;

    gap: var(--default-gap);
    grid-auto-flow: column;
    grid-template-columns: 3fr repeat(4, minmax(var(--button-width), 1fr));
    grid-template-rows: 1fr 3fr;
    grid-template-areas:
	"display display equals logo logo"
	"numberpad memory arithmetic unary control-panel";

    padding: var(--default-gap);
}

.area-display {
    grid-area: display;
    color: black;
    background-color: cyan;
    display: flex;
    justify-content: end;
    align-items: end;
    padding: 20px;
    font-size: var(--font-size-normal);
    border-radius: var(--default-border-radius);
}

.area-display > p.entry {
    transform: scale(1, 2);
    letter-spacing: 3px;
    font-style: italic;
}

.blink {
    animation: 0.1s var(--cubic-bezier-1) blink;
}

@keyframes blink {
    0% {
        opacity: 1
    }

    50% {
        opacity: 0;
    }

    100% {
        opacity: 1;
    }
}

.area-logo {
    grid-area: logo;
    font-size: var(--font-size-logo);
}

.area-numberpad {
    grid-area: numberpad;
}

.area-memory {
    grid-area: memory;
}

.area-arithmetic {
    grid-area: arithmetic;
}

.area-unary {
    grid-area: unary;
    height: 75%;
}

.area-control-panel {
    grid-area: control-panel;
    height: 75%;
}

.area-equals {
    grid-area: equals;
}

[class*="flex-"] {
    display: flex;
    gap: var(--default-gap);
}

[class*="grid-"] {
    display: grid;
    gap: var(--default-gap);
}

.flex-force-centering {
    justify-content: center;
    align-items: center;
}

.grid-dock {
    grid-template-rows: repeat(4, var(--button-height));
    grid-template-areas:
	"seven eight nine"
	"four five six"
	"one two three"
	"zero zero decimal-point";
}

.flex-dock {
    flex-direction: column;
}

/* Mobile-first: all flex button-docks are vertical, and so use the
   'button-height' custom property */
.flex-dock > [class*="button"] {
    flex: 1;
}

.button {
    color: var(--button-fg-color);
    border-radius: var(--default-border-radius);
    background: var(--button-initial-gradient);
    font-size: var(--font-size-button);

    --button-bg-color-light: #fafbff;
    --button-fg-color: #010b02;
    --button-bg-color-dark: #a2a2a2;
    --button-initial-gradient: linear-gradient(var(--button-bg-color-light) 20%, var(--button-bg-color-dark) 80%);
    --button-final-gradient: linear-gradient(var(--button-bg-color-dark) 20%, var(--button-bg-color-light) 80%);
}

.button:active {
    background: var(--button-final-gradient);
    color: white;
}

.js-button-active {
    animation: .1s linear active;
    background: var(--button-final-gradient);
}

@keyframes active {
    from {
        background: var(--button-initial-gradient);
    }

    to {
        background: var(--button-final-gradient);
    }
}

.one {
    grid-area: one;
}

.two {
    grid-area: two;
}

.three {
    grid-area: three;
}

.four {
    grid-area: four;
}

.five {
    grid-area: five;
}

.six {
    grid-area: six;
}

.seven {
    grid-area: seven;
}

.eight {
    grid-area: eight;
}

.nine {
    grid-area: nine;
}

.zero {
    grid-area: zero;
}

.decimal-point {
    grid-area: decimal-point;
}

@media only screen and (orientation: portrait), (min-width: 992px) {
    :root {
	--button-height: auto; /* Make buttons fit better, and also not cause overflow */
    }

    .area-display {
        font-size: var(--font-size-reduced);
    }

    body {
	grid-template-areas:
	    "display display display equals"
	    "logo logo logo logo"
	    "arithmetic arithmetic arithmetic arithmetic"
	    "numberpad numberpad numberpad memory"
	    "numberpad numberpad numberpad memory"
	    "numberpad numberpad numberpad memory"
	    "unary unary unary control-panel"
	    ". . . control-panel";

	grid-template-columns: repeat(4, 1fr);
	grid-template-rows: 1fr min-content repeat(6, 1fr);
    }

    .flex-dock > [class*="button"] {
	flex: 1;
    }

    /* Keep memory and control-panel as vertical button-docks, but change
    the rest to horizontal */
    .flex-dock:not(.area-memory, .area-control-panel) {
	flex-direction: row;
    }

    .grid-dock {
	grid-template-rows: repeat(4, minmax(var(--button-height), 1fr)); /* Use minmax */
    }

    .area-arithmetic {
	align-items: end;
    }

    .area-unary {
	align-items: start;
	height: 62%;
    }

    .area-arithmetic > * {
	height: 75%;
    }

    .area-unary > * {
	height: 100%;
    }

    .area-control-panel {
	height: 100%;
    }

    .area-logo {
	margin-bottom: -30px;
    }
}

/* Tablet (Kindle, iPad) */
@media only screen and (min-width: 800px) {
    /* Restore large font size for larger displays */
    .area-display {
        font-size: var(--font-size-normal);
    }
}

/* Desktop */
@media only screen and (min-width: 992px) {
    body {
	width: 50%;
	margin: auto;
	border: 1px solid white;
	border-radius: var(--default-border-radius);
    }
}
